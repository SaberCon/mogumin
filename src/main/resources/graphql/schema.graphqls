"""The query root of GraphQL interface."""
type Query {
    """Fetches an object given its ID."""
    node(id: ID!): Node

    """Lookup nodes by a list of IDs."""
    nodes(ids: [ID!]!): [Node]!

    """The currently authenticated user."""
    viewer: User!

    ossData: OssData!

    smsCodeValidation(type: SmsType!, phone: String!, code: String!): SmsCodeValidation!
}

type Mutation {
    sendSmsCode(input: SendSmsCodeInput!): DefaultPayload!

    login(input: LoginInput!): LoginPayload!
    updateUserPhone(input: UpdateUserPhoneInput!): DefaultPayload!
    updateUserPassword(input: UpdateUserPasswordInput!): DefaultPayload!
    updateUser(input: UpdateUserInput!): DefaultPayload!

    createNote(input: CreateNoteInput!): CreateNotePayload!
    updateNote(input: UpdateNoteInput!): UpdateNotePayload!
    deleteNote(input: DeleteNoteInput!): DefaultPayload!
}

input SendSmsCodeInput {
    clientMutationId: String
    type: SmsType!
    phone: String!
}

input LoginInput {
    clientMutationId: String
    type: LoginType!
    phone: String!
    code: String!
}

type LoginPayload {
    clientMutationId: String
    token: String!
}

input UpdateUserPhoneInput {
    clientMutationId: String
    phone: String!
    bindCode: String!
    unbindCode: String!
}

input UpdateUserPasswordInput {
    clientMutationId: String
    password: String!
    code: String!
}

input UpdateUserInput {
    clientMutationId: String
    username: String
    avatar: URI
}

input CreateNoteInput {
    clientMutationId: String
    title: String!
    content: String!
}

type CreateNotePayload {
    clientMutationId: String
    subject: Note!
}

input UpdateNoteInput {
    clientMutationId: String
    id: ID!
    title: String
    content: String
}

type UpdateNotePayload {
    clientMutationId: String
    subject: Note
}

input DeleteNoteInput {
    clientMutationId: String
    id: ID!
}

enum SmsType {
    LOGIN
    UPDATE_PASSWORD
    BIND_PHONE
    UNBIND_PHONE
}

enum LoginType {
    SMS
    PWD
}

type SmsCodeValidation {
    matched: Boolean!
}

type OssData {
    accessId: String!
    host: String!
    dir: String!
    policy: String!
    signature: String!
    expire: Long!
}

type User implements Node & Auditable {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    username: String!
    phone: String!
    avatar: URI!
    notes(
        """Returns the first _n_ elements from the list."""
        first: Int!
        """Returns the elements in the list that come after the specified cursor."""
        after: String
        """Ordering of the returned elements."""
        orderBy: AuditableOrder = {direction: DESC, field: CREATED_AT}
    ): NoteConnection! @skipcodegen
}

"""The connection type for Note."""
type NoteConnection {
    """A list of edges."""
    edges: [NoteEdge!]!

    """A list of nodes."""
    nodes: [Note!]!

    """Information to aid in pagination."""
    pageInfo: PageInfo!

    """Identifies the total count of items in the connection."""
    totalCount: Int!
}

"""An edge in a connection."""
type NoteEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Note
}

type Note implements Node & Auditable {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    title: String!
    content: String!
    creator: User! @skipcodegen
}

"""Ordering options for Auditable connections"""
input AuditableOrder {
    """The ordering direction."""
    direction: OrderDirection!

    """The field to order by."""
    field: AuditableOrderField!
}

"""Properties by which Auditable connections can be ordered."""
enum AuditableOrderField {
    CREATED_AT
    UPDATED_AT
}

"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
    """Specifies an ascending order for a given `orderBy` argument."""
    ASC

    """Specifies a descending order for a given `orderBy` argument."""
    DESC
}

type DefaultPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Information about pagination in a connection."""
type PageInfo {
    """When paginating backwards, the cursor to continue."""
    startCursor: String

    """When paginating forwards, the cursor to continue."""
    endCursor: String

    """When paginating backwards, are there more items?"""
    hasPreviousPage: Boolean!

    """When paginating forwards, are there more items?"""
    hasNextPage: Boolean!
}

"""An object with an ID."""
interface Node {
    """ID of the object."""
    id: ID!
}

interface Auditable {
    """Identifies the date and time when the object was created."""
    createdAt: DateTime!

    """Identifies the date and time when the object was last updated."""
    updatedAt: DateTime!
}

"""An ISO-8601 encoded UTC date string."""
scalar DateTime

"""An ISO-8601 encoded date string."""
scalar Date

"""An ISO-8601 encoded time string."""
scalar Time

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

scalar Long

directive @skipcodegen on FIELD_DEFINITION
